package logic;
/*
 * Car class with Hibernate annotations to fill the MySQL table
 * carId and carNumber are unique fields
 * carId, carNumber, parked, registered, carParkedTime can't be null
 * equals() only checks carId and carNumber: other fields can be equal
 * different cars may have the same carOwner (manyToOne relations)
 */
import util.ErrorDialog;
import javax.swing.JFrame;
import javax.persistence.Table;
import javax.persistence.Entity;
import javax.persistence.Column;
import javax.persistence.Id;
import javax.persistence.ManyToOne;
import javax.persistence.CascadeType;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import java.time.LocalDateTime;

@Entity(name = "Car")
@Table(name = "cars")
public class Car {
	////FIELDS////
	@Id
	@Column(name = "car_id")
	private int carId;
	@Column(name = "car_number")
	//8 symbols, format: 1111АФ-3 (belarusian upper and lower case letters, region 1-7)
	private String carNumber;  
	@Column(name = "car_model")
	//max 100 symbols: 0-9, russian, english upper and lower letters, -, /l
	private String carModel;   
	@Column(name = "registered")
	private boolean registered; //if false, carOwner is null
	@Column(name = "parked")
	private boolean parked; 
	@ManyToOne(cascade = CascadeType.REFRESH, fetch = FetchType.EAGER)
    @JoinColumn(name = "owner_id")
	private CarOwner owner; 
	@Column(name = "car_parked_time")
	//last time the car became parked
	private LocalDateTime carParkedTime;   
	////AUTOGENERATED FUNCTIONS TO GENERATE THE HASHCODE AND TO CHECK FOR EQUALITY////
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((carNumber == null) ? 0 : carNumber.hashCode());
		return result;
	}
	
	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		Car other = (Car) obj;
		if(carId != other.carId) return false;
		if (carNumber == null) {
			if (other.carNumber != null) return false;
		} else if (!carNumber.equals(other.carNumber)) return false;
		return true;
	}
	////SETTERS AND GETTERS////
	public void setCarNumber(String carNumber, JFrame frame){
		if(carNumber == null){
			ErrorDialog.showErrorDialog(frame, "Неправильный номер автомобиля");
		}else{
			this.carNumber = carNumber;
		}	
	}
	public String getCarNumber(){ return carNumber; }
	
	public void setCarId(int carId, JFrame frame){
		if(carId <= 0){
			ErrorDialog.showErrorDialog(frame, "Неправильный индекс автомобиля");
		}else{
			this.carId = carId;
		}	
	}
	public int getCarId(){ return carId; }
	
	public void setCarModel(String carModel){ this.carModel = carModel; }
	public String getCarModel(){ return carModel; }
	
	public void setRegistered(boolean registered){ this.registered = registered; }
	public boolean getRegistered(){ return registered; }
	
	public void setParked(boolean parked){ this.parked = parked; }
	public boolean getParked(){ return parked; }
	
	public void setCarOwner(CarOwner owner){ this.owner = owner; }
	public CarOwner getCarOwner(){ return owner; }
	
	public void setCarParkedTime(LocalDateTime carParkedTime, JFrame frame) {
		if(carParkedTime == null) {
			ErrorDialog.showErrorDialog(frame, "Введите правильную дату");
		}else {
			this.carParkedTime = carParkedTime;
		}
	}
	public LocalDateTime getCarParkedTime() { return carParkedTime; }
}